Ok so I will have some sort of enttity object class thing (I want a good name for it)
This will be mainly fixed, since I want this to be an advanced PBR only engine, not some old primitive blinn-phong shading that's been done a lot
First of all, to fix a lot of my issues with alpha blending, I will be using set functions to provide more info to the renderer
For example, you can't just do Object.DiffuseTex = LoadTexture("window.png")
Rather, it will be Object.LoadTexture(TEXTURE_DIFFUSE, "window.png")
This makes the system a lot more automated without shitty automation I was doing before
Shaders this time will be entirely managed by the renderer, I don't give a fuck whether somebody wants a custom shader, although that might be something worth considering down the line
The reason I'm mainly doing this is to make framebuffer management be a lot easier, no custom format stuff, just set a few variables and you are good to go
I will still be using a command buffer based system to allow much better management of things like deferred shading or even possible GI if I ever get that far
I also beleive that custom shaders and alpha blending with framebuffers have no place in a small engine like this designed more for use than customizablity 
A custom shader pipeline would really be a lot like how Optifine does it because I have the most exprience there
Although a custom math library would be appreciated it currently is unncessary
I may in a few weeks add what I'm planning to call Voltix (orginnaly called voltic) GUI which is an entirely-CPU based GUI system to iron out nasty compatilbity issues
Basically it copys parts of images and text from a texture or texture atlas in the case of text to a framebuffer with a Z-Buffer algorithm and alpha blending
The idea is once we are done rendering the CPU-side framebuffer we copy it to an OpenGL texture and render it on top of our screen
So basically, startng tomorow (besides more planning):
Delete most of my files contents, such as the mesh class so I can start a rewrite
Come up with a class name I like and that isn;t unreasoanble
Set up an automation system for the class
Update the renderer to work with it
Once I get everything working I will move onto framebuffers and then and more cool things like shadows and skyboxes
Some rendering effects I plan to add is atmosphereic scattering and PBR
I mainly want to go for a full PBR engine as I said

Class name: HydrogenModel
Class member vars:
	-Mesh Object
		Class name HydrogenMesh
		Soley a wrapper for the VAO and VBO(s)
		Simplifies some stuff for the model class
		Model class only takes in a path, maybe an array for debug only
		Model class loads model, sends if off to the mesh
	-Diffuse Texture
	-Normal map
	-Height map
	-Metalness texture
	-Smoothness/Roughness Texture
	While I am using a more primitive shading style the smoothness texture with be the specular map
	If the user does not want to use something like a normal map he can use a model class function which will swap out the normal texture with a (pre-created if I ever create such system) normal texture of (1.0f, 0.5f, 0.5f) (same stuff for height map)


	Start by rewrtiing mesh class 

	Current plan
	Blending support (ez) -> SSBRDF (cook torrance, maybe difficult) -> framebuffers -> skyboxes

	Current roadmap:
	Blending - 10/28
	SSBRDF - 10/28 or 10/29
	framebuffers - 10/29-10/30
	skyboxes - 10/31-11/1

	New roadmap 
	10/30 - parralax / releif mappimg
	10/30-31 - skyboxes and stuff
	10/31-11/1 - framebuffers

	11/1 plan - resturcture rendering cycle

	Roadmap 3.0

	11/2-11/3 - Finish framebuffers
	11/3-11/4 - Fix TBN and parallax